name: Deploy Hetzner Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ca_pub_fingerprint:
        description: fingerprint of CA signed user cert
        required: false

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17'
      - name: Build application
        env:
          CTX_HETZNER_API_TOKEN: ${{ secrets.CTX_HETZNER_API_TOKEN }}
          CTX_HETZNER_VAULT_VOLUME_ID: ${{ secrets.CTX_HETZNER_VAULT_VOLUME_ID }}
          CTX_ACKDE_HOST_SSH_KEY_PUB_B64: ${{ secrets.CTX_ACKDE_HOST_SSH_KEY_PUB_B64 }}
          CTX_ACKDE_HOST_SSH_KEY_PRIV_B64: ${{ secrets.CTX_ACKDE_HOST_SSH_KEY_PRIV_B64 }}
          CTX_SERVER_DEPLOY_CACERT_B64: ${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}
          CTX_SERVER_DEPLOY_SECRET_B64: ${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}
          CTX_SERVER_DEPLOY_PUBLIC_B64: ${{ secrets.CTX_SERVER_DEPLOY_PUBLIC_B64 }}
          ACME_JSON: ${{ secrets.CTX_ACME_JSON }}
          SYNCTHING_CONFIG: ${{ secrets.SYNCTHING_CONFIG }}
          SYNCTHING_KEY: ${{ secrets.SYNCTHING_KEY }}
          SYNCTHING_CERT: ${{ secrets.SYNCTHING_CERT }}
        run: |
          go mod tidy
          go build hetzner.go

          envsubst '${CTX_ACKDE_HOST_SSH_KEY_PRIV_B64} ${CTX_ACKDE_HOST_SSH_KEY_PUB_B64} ${CTX_SERVER_DEPLOY_CACERT_B64} ${CTX_SERVER_DEPLOY_SECRET_B64} ${CTX_SERVER_DEPLOY_PUBLIC_B64} ${ACME_JSON} ${SYNCTHING_CONFIG} ${SYNCTHING_KEY} ${SYNCTHING_CERT}' < scripts/raw_ubuntu_userdata.sh > ubuntu_userdata.sh

          mkdir ~/.ssh # for new RSA key created in next step
          ./hetzner -fn=createServer -tag=traefik

          # prepare new Hetzner server for Github deployment
          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          source /tmp/new_hetzner_server_params

          ./hetzner -fn=firewallSSH -tag=traefik -ip=$public_ip_address -serverID=$NEW_SERVER_ID

          sudo apt-get -y install nmap
          while [ `nmap "$NEW_SERVER_IPV4" -PN -p ssh | egrep 'open|closed|filtered' | awk '{print $2}'` != "open" ]
          do
            echo "ssh not available..."
            ./hetzner -fn=checkServer -serverID=$NEW_SERVER_ID
            sleep 3
          done

          ssh -o StrictHostKeyChecking=no root@$NEW_SERVER_IPV4 "\
            mkdir -p traefik/logs &&
            cloud-init status --wait > /dev/null 2>&1
            [ $? -ne 0 ] && echo 'Cloud-init failed' && exit 1
            echo 'Cloud-init succeeded at ' `date -R`  > ~/post-cloud-init.log"

          # cloud-init setup new host keys - let's ditch the orig ones
          ssh-keygen -f "/home/runner/.ssh/known_hosts" -R $NEW_SERVER_IPV4

          # begin deployment to Hetzner
          scp -o StrictHostKeyChecking=no scripts/dynamic_conf.yml /tmp/new_hetzner_server_params root@$NEW_SERVER_IPV4:~/traefik/

          ./hetzner -fn=cleanupDeploy -tag=traefik

          rm ubuntu_userdata.sh ~/.ssh/* /tmp/new_hetzner_server_params

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
