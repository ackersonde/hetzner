name: Deploy Hetzner Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ca_pub_fingerprint:
        description: fingerprint of CA signed user cert
        required: false

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17'
      - name: Build application
        env:
          CTX_HETZNER_API_TOKEN: ${{ secrets.CTX_HETZNER_API_TOKEN }}
          CTX_HETZNER_VAULT_VOLUME_ID: ${{ secrets.CTX_HETZNER_VAULT_VOLUME_ID }}
          CTX_ACKDE_HOST_SSH_KEY_PUB_B64: ${{ secrets.CTX_ACKDE_HOST_SSH_KEY_PUB_B64 }}
          CTX_ACKDE_HOST_SSH_KEY_PRIV_B64: ${{ secrets.CTX_ACKDE_HOST_SSH_KEY_PRIV_B64 }}
          CTX_SERVER_DEPLOY_CACERT_B64: ${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}
          CTX_SERVER_DEPLOY_SECRET_B64: ${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}
          CTX_SERVER_DEPLOY_PUBLIC_B64: ${{ secrets.CTX_SERVER_DEPLOY_PUBLIC_B64 }}
          ACME_JSON: ${{ secrets.CTX_ACME_JSON }}
        run: |
          go mod tidy
          go build hetzner.go

          envsubst '${CTX_ACKDE_HOST_SSH_KEY_PRIV_B64} ${CTX_ACKDE_HOST_SSH_KEY_PUB_B64} ${CTX_SERVER_DEPLOY_CACERT_B64} ${CTX_SERVER_DEPLOY_SECRET_B64} ${CTX_SERVER_DEPLOY_PUBLIC_B64} ${ACME_JSON}' < scripts/raw_ubuntu_userdata.sh > ubuntu_userdata.sh

          mkdir ~/.ssh # for new RSA key created in next step
          ./hetzner -fn=createServer -tag=traefik

          # prepare new Hetzner server for Github deployment
          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          source /tmp/new_hetzner_server_params

          ./hetzner -fn=firewallSSH -tag=traefik -ip=$public_ip_address -serverID=$NEW_SERVER_ID

          sudo apt-get -y install nmap
          while [ `nmap "$NEW_SERVER_IPV4" -PN -p ssh | egrep 'open|closed|filtered' | awk '{print $2}'` != "open" ]
          do
            echo "ssh not available..."
            ./hetzner -fn=checkServer -serverID=$NEW_SERVER_ID
            sleep 3
          done

          ssh -o StrictHostKeyChecking=no root@$NEW_SERVER_IPV4 "\
            mkdir -p traefik/logs &&
            echo 'server executing cloud-init...please be patient'
            cloud-init status --wait > /dev/null 2>&1
            [ $? -ne 0 ] && echo 'Cloud-init failed' && exit 1
            echo 'Cloud-init succeeded at ' `date -R`  > ~/post-cloud-init.log
            mkdir /mnt/volume-nbg1-vault &&
            mount -o discard,defaults /dev/disk/by-id/scsi-0HC_Volume_15704224 /mnt/volume-nbg1-vault
            echo '/dev/disk/by-id/scsi-0HC_Volume_15704224 /mnt/volume-nbg1-vault ext4 discard,nofail,defaults 0 0' >> /etc/fstab"

          # cloud-init setup new host keys - let's ditch the orig ones
          ssh-keygen -f "/home/runner/.ssh/known_hosts" -R $NEW_SERVER_IPV4

          # deploy Traefik to Hetzner
          ssh -o StrictHostKeyChecking=no root@$NEW_SERVER_IPV4 "\
            docker run -d --name ipv6nat --cap-drop ALL --cap-add NET_ADMIN --cap-add NET_RAW --network host --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock:ro robbertkl/ipv6nat && \
            docker run -d --name traefik --restart=unless-stopped \
              -e DO_AUTH_TOKEN=${{ secrets.CTX_DIGITALOCEAN_DNS_TOKEN }} \
              -v /var/run/docker.sock:/var/run/docker.sock:ro \
              -v ~/traefik/logs:/var/log/traefik/ \
              -v ~/traefik/acme.json:/acme.json \
              -v ~/traefik/dynamic_conf.yml:/dynamic_conf.yml \
              --label='traefik.enable=true' \
              --label='traefik.http.middlewares.api_auth.basicauth.users=${{ secrets.CTX_BASIC_AUTH_USER }}:${{ secrets.CTX_BASIC_AUTH_PASSWD }}' \
              --label='traefik.http.routers.api.entrypoints=web,secure' \
              --label='traefik.http.routers.api.middlewares=http-ratelimit@file,secHeaders@file,api_auth' \
              --label='traefik.http.routers.api.rule=Host(\`mv.ackerson.de\`)' \
              --label='traefik.http.routers.api.service=api@internal' \
              --label='traefik.http.routers.api.tls.certResolver=letsencrypt' \
              --label='traefik.http.routers.api.tls.domains=mv.ackerson.de' \
              --label='traefik.http.routers.https-redirect.rule=HostRegexp(\`{any:.*}\`)' \
              --label='traefik.http.routers.https-redirect.middlewares=https-redirect@docker' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.scheme=https' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.permanent=true' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.port=443' \
              -p 80:80 -p 443:443 traefik:2.7 \
              --accesslog.filepath=/var/log/traefik/access.log \
              --log.filepath=/var/log/traefik/traefik.log --log.level=WARN \
              --api --providers.docker.exposedByDefault=false --providers.file.filename=/dynamic_conf.yml \
              --entryPoints.web.forwardedHeaders.trustedIPs=172.17.0.1/24,fd00::/80 \
              --entryPoints.secure.forwardedHeaders.trustedIPs=172.17.0.1/24,fd00::/80 \
              --entrypoints.web.address=:80 --entrypoints.secure.address=:443 \
              --certificatesResolvers.letsencrypt.acme.email=dan@ackerson.de \
              --certificatesResolvers.letsencrypt.acme.storage=acme.json \
              --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=digitalocean \
              --certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=5"

          ./hetzner -fn=cleanupDeploy -tag=traefik

          rm ubuntu_userdata.sh ~/.ssh/* /tmp/new_hetzner_server_params

          curl -Ss -X POST -u "${{secrets.CTX_GITHUB_PERSONAL_ACCESS_USERNAME}}:${{secrets.CTX_GITHUB_PERSONAL_ACCESS_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/vault/actions/workflows/build.yml/dispatches \
            -d '{"ref":"master"}'

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
